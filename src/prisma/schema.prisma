generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

enum CancelMessage {
    cancel
    message
}

model User {
    id        String  @id @default(auto()) @map("_id") @db.ObjectId
    name      String
    telephone String
    password  String
    provider  Boolean

    Endereco     Endereco[]
    Pedidos      Pedido[]      @relation("PedidosUsuario")
    Entregas     Pedido[]      @relation("PedidosEntregador")
    Agendamentos Agendamento[]

    pedidoId String? @db.ObjectId

    @@map("users")
}

model Endereco {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    rua         String
    numero      String
    complemento String
    cep         Int

    userId String? @db.ObjectId
    user   User?   @relation(fields: [userId], references: [id])

    bairroId String?        @db.ObjectId
    bairro   VariacaoPreco? @relation(fields: [bairroId], references: [id])

    agendamentos Agendamento[]
    Pedido       Pedido[]

    @@map("enderecos")
}

model Pedido {
    id          String          @id @default(auto()) @map("_id") @db.ObjectId
    pagamentoId String?         @db.ObjectId
    pagamento   FormaPagamento? @relation(fields: [pagamentoId], references: [id])

    produtoId String?  @db.ObjectId
    Produto   Produto? @relation(fields: [produtoId], references: [id])

    quantidade String
    troco      String

    userId  String? @db.ObjectId
    usuario User?   @relation("PedidosUsuario", fields: [userId], references: [id])

    entregadorId String? @db.ObjectId
    entregador   User?   @relation("PedidosEntregador", fields: [entregadorId], references: [id])

    enderecoId String?   @db.ObjectId
    endereco   Endereco? @relation(fields: [enderecoId], references: [id])

    status String
    total  String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    tempo     String

    cancel        String
    cancelMessage String

    @@map("pedidos")
}

model Produto {
    id             String @id @default(auto()) @map("_id") @db.ObjectId
    imagem_produto String
    nome_produto   String
    preco_produto  Int

    payment_type_id String?         @db.ObjectId
    payment_type    FormaPagamento? @relation(fields: [payment_type_id], references: [id])

    Pedido      Pedido[]
    Agendamento Agendamento[]

    @@map("produtos")
}

model FormaPagamento {
    id        String @id @default(auto()) @map("_id") @db.ObjectId
    nomeForma String
    taxajuros Int

    Pedido  Pedido[]
    Produto Produto[]

    @@map("formapagamentos")
}

model VariacaoPreco {
    id         String @id @default(auto()) @map("_id") @db.ObjectId
    bairro     String
    variacao13 Int
    variacao45 Int

    Endereco Endereco[]

    @@map("variacaoprecos")
}

model StoreAvailable {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    isOpen     Boolean
    timestamps DateTime @updatedAt
}

model Agendamento {
    id       String   @id @default(auto()) @map("_id") @db.ObjectId
    datatime DateTime
    hora     String
    minutos  String

    userId String? @db.ObjectId
    user   User?   @relation(fields: [userId], references: [id])

    enderecoId String?   @db.ObjectId
    endereco   Endereco? @relation(fields: [enderecoId], references: [id])

    produtoId String?  @db.ObjectId
    produto   Produto? @relation(fields: [produtoId], references: [id])

    total     String?
    createdAt DateTime @default(now())
}
